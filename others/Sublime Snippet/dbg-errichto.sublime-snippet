<snippet>
	<content><![CDATA[
#define sim template < class c
#define ris return * this
#define dor > dbg & operator <<
#define eni(x) sim > typename \
	enable_if<sizeof dud<c>(0) x 1, dbg&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
struct dbg {
	#ifdef LOCAL
	~dbg() { cerr << endl; }
	eni(!=) cerr << boolalpha << i; ris; }
	eni(==) ris << range(begin(i), end(i)); }
	sim, class b dor(pair < b, c > d) {
		ris << "(" << d.first << ", " << d.second << ")";
	}
	sim dor(rge<c> d) {
		*this << "[";
		for (auto it = d.b; it != d.e; ++it)
			*this << ", " + 2 * (it == d.b) << *it;
		ris << "]";
	}
	#else
	sim dor(const c&) { ris; }
	#endif
};
#define imie(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
#define dbA(A, a, b) for(int i_=a;i_<=b;++i_) cerr<<A[i_]<<" "; cerr<<'\n';

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	-- <tabTrigger>dbg-errichto</tabTrigger> --
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
