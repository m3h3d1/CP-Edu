<snippet>
	<content><![CDATA[
template<class T> int size(T &&x) {return int(x.size());}
template<class A, class B> ostream& operator<<(ostream &out, const pair<A,B> &p) {return out<<'('<<p.first<<", "<<p.second<<')';}
template<class T> auto operator<<(ostream &out, T &&x) -> decltype(x.begin(), out) {out<<'[';
    for(auto it=x.begin(); it!=x.end(); ++it) {out<<*it<<(it==prev(x.end()) ? "":", ");} return out<<']';}
void dump(){} template<class T, class... Args> void dump(T &&x, Args... args) {cerr<<x<<";  ";dump(args...);}
#ifdef m3
struct Nl{~Nl(){cerr<<'\n';}};
#define dbg(x...) cerr<<(strcmp(#x, "") ? #x ":  " : ""), dump(x), Nl(), cerr<<""
#define dba(A, a, b) for(int i_=a;i_<=b;++i_) cerr<<A[i_]<<" "; cerr<<'\n';
#else
#define dbg(...)
#define dba(...)
#endif

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	-- <tabTrigger>dbg-tnowak-mod</tabTrigger> --
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
