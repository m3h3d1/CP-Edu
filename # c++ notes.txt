#others:
	A[-1] = 0; if A is declared in global
#Negative index array:
	const int M = 10; // I want indices from -M to +M
	int _a[2*M+1]; // underlying array of size 2*M+1
	int* a = _a + M; // array that has index [0] in the middle of the big array
	int main() {
		a[-10] = a[1] = 7;
		cout << a[-10] << " " << a[3] << " " << a[10] << endl;
	}
	https://codeforces.com/blog/entry/70472?#comment-549321

# use 1ll
	int x = 1000000;
	int y = 1000000;
	long long int z = 1ll*x*y;

long long int z = 1ll << 40;

# (z + x*y)%mod is the same as ((z%mod) + ((x%mod)*(y%mod))%mod)%mod.

# inbuilt gcd function __gcd(x,y)

@ integer Overflow:
	a+b<=INT_MAX eirokom howa lagbe overflow jate na hoy. 
	so, eirokom vabe check deya jay, a<=INT_MAX-b

	INT_MAX = numeric_limits<int>::max()

@ mod:
	  a = (a+b)%mod
	=>(a+b) %= mod

@ fill 2d array:
	fill(&arr[0][0], &arr[0][0]+sizeof(arr), 1); // not working

	working:
		int mem[N][N]
		fill(mem[0]+0, mem[0]+N*N, 3);
		fill(mem[0]+0, mem[0]+sizeof(mem)/sizeof(int), 3);
@ 2D vector of N rows and M column, with a value 0:
	vector<vector<int>> vec(n ,vector<int>(m, 0));

@ init vector:
	vector<int> v;
	v = vector<int> (n, 1);

@ resize 2d vector:
	// vector<vector<int>> M;
	// int n = number of rows, m = number of columns;
	M.resize(n, vector<int>(m));

	matrix.clear();
	matrix.resize( row_count , vector<int>( column_count , initialization_value ) );
	// we can create a 2D integer vector with 3 rows and 5 columns having "-1" as initial value by:
	matrix.clear();
	matrix.resize(3, vector<int> (5,-1));

@ ceil:
	ceil(a/b) = (a+b-1)/b;
	ceil(a/b) = -(-a/b)
	
@ vector input:
	vector<int> A(n);
	for(int &x: A) {
		cin>>x;
	}

@ calculate the most significant digit of any number:
	int n;
	cin >> n;
	double k=log10(n);
	k=k-floor(k);
	int x=pow(10,k);
	cout << x;

@ Calculating the number of digits directly:
	Number of digits in N =floor(log10(N)) + 1;

@ digits of n factorial:
	double res=0;
	cin>>n>>base;
	for(int i=1;i<=n;++i) {
		res+=log10(i)/log10(base);
	}
	cout<<floor(res)+1<<endl;

@ Efficient trick to know if a number is a power of 2:
	/* Function to check if x is power of 2*/
	bool isPowerOfTwo (int x){
		/*First x in the below expression
		is for the case when x is 0 */
		return x && (!(x&(x-1)));
	}

@ int to string:
	string s = to_string(100);
	stringstream ss;
	ss<<n;
	cout<<ss.str()<<endl;

@ string to int:
	int stoi( const std::string& str, std::size_t* pos = 0, int base = 10 ); // Interprets a signed integer value in the string str.
	int x = stoi(str, 0 ,10);
	int x = stoi(str) // default 10 base

	int n;
	stringstream ss(str);
	ss>>n;

@ Copy Algorithm: used to copy elements from one container to another.
	int source[5] = {0, 12, 34, 50, 80};
	int target[5];
	// copy 5 elements from source to target
	copy_n(source, 5, target);

# for(i=start;i<=end && end-i+1>=r-indx;i++)
	from 03. print all combination

# setw() -> to set the number of digit
  setfill() -> to fill with charectars
  setprecision(3)<<fixed<<
  
# cin.tie(NULL) -> dile sobgula input ekbare niye then output dekhay?

# jodi stl function thake abar oi name nijer arekta function lekha hoy,
	tahole create kora function ta kaj korbe.

@ separate test cases: if(T) cout<<'\n'; (uva 10963)

@ direction array:
	Four:
	int dx[]={-1,0,0,1};
	int dy[]={0,-1,1,0};

	Eight:
	int dx[]={-1,-1,-1,0,0,1,1,1};
	int dy[]={-1,0,1,-1,1,-1,0,1};

	Knight:
	int dx[] = {2,2,-2,-2,1,1,-1,-1};
	int dy[] = {1,-1,1,-1,2,-2,2,-2};

	Knight:
	int hx[]={-2,-2,-1,+1,+2,+2,-1,+1};
	int hy[]={+1,-1,+2,+2,-1,+1,-2,-2};

	King:
	int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};
	int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};

@ Binary std::string to decimal
	unsigned long long val = std::bitset<64>(str).to_ullong(); (bitset)
	long long val=stoll(str,0,2); (include<string>)

@ use of auto:
	for(auto it=mp.begin();it!=mp.end();++it)

@ for range:
	for(auto x: vec) cout<<x<<" ";

@ initialise copy constructor:
	// vector<string> v created earlier
	// copy constructor called
	vector<string> copyV(v);
	vector<string> copyV2 = v;

@ extract words from line:
	getline(cin,str);
	string word;
	stringstream ss(str);
	while(ss>>word) {	
	}

@ reset structure:
	You can just assign a constructed temporary to it:
	Part my_struct;
	my_struct = Part(); // reset
	
	C++11:
	my_struct = {}; // reset


@ Random number generator:
	mt19937 RNG(chrono::steady_clock::now().time_since_epoch().count()); 
	#define SHUF(v) shuffle(v.begin(), v.end(), RNG);
	// Use mt19937_64 for 64 bit random numbers.

@ Ignore warning from specific lines of code:
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wconversion"
	...Code...
	#pragma GCC diagnostic pop

@ Check Overflow a*b:
	int isOverflow(unsigned long long a, unsigned long long b) { 
	    if (a == 0 || b == 0) return 0; 
	    unsigned long long result = a * b; 
	    if (a == result / b) return 0; 
	    else return 1; 
	} 


@ shortcut:
	int check=1;
	puts(check? "ok":"not ok");
	return 0 * puts("End");
	return printf("End"), 0;
	return cout<<"Hello", 0;

###next to solve:
	uva:
		12043




###
FAST IO:
	template <typename T> inline void read(T &x) {
	    bool neg=false;
	    int c=getchar();
	    while(!isdigit(c)) {
	        if(c=='-') neg = true;
	        c=getchar();
	    }
	    for(x=0;isdigit(c);c=getchar())
	        x = (x<<1) + (x<<3) + c-'0';
	    if(neg) x *= -1;
	}
	read(x);

@ update func:
	void update(int v, int l, int r, int i, int j, ll x) {
	    if(l>=i && r<=j) {
	        sum[v]+=x;
	        lazy[v]+=x;
	        MAX[v] = max(MAX[v], sum[v]);
	        prelazy[v] = max(prelazy[v], lazy[v]);
	        return;
	    }
	    push_down(v);
	    int m = (l+r)/2;
	    if(i<=m) update(lchild,i,j,x);
	    if(j>m) update(rchild,i,j,x);
	    push_up(v);
	}

@ c++17 direction array:
	const pii steps[] = {{-1,0},{1,0},{0,-1},{0,1}};
	...
	    for (auto [dx,dy] : steps) {
	        int newX = x + dx;
	        int newY = y + dy;
	    }
	...

@ lambda, loop stl:
	typedef std::pair<int, int> pair;
	int main() {
	    vector<pair> v = { { 1, 2 }, { 6, 4 }, { 3, 4 }, { 4, 1 } };
	    sort(v.begin(), v.end(),
	            [](const pair &x, const pair &y) {
	                // compare the second value
	                if (x.second != y.second) {
	                    return x.second < y.second;
	                }
	                // compare first only if the second value is equal
	                return x.first < y.first;
	            });
	 
	    for (const pair &p: v) {
	        std::cout << '{' << p.first << ',' << p.second << '}' << std::endl;
	    }
	    return 0;
	}


@ Member initializer list:
	class test {
	    vector<int> v;
	public:
	    test(int n) : v(n, 1) {}
	};
	// vector er size hobe n ebong prottek ta element er value hobe 1

@ int128:
__int128_t abs128(__int128_t val){return val<0?-val:val;}

ostream &operator<<(ostream &os,__int128_t val){
  if(ostream::sentry(os)){
    __uint128_t tmp=abs128(val);
    char buf[64];
    char *d=end(buf);
    do{
      --d;
      *d=char(tmp%10+'0');
      tmp/=10;
    }while(tmp);
    if(val<0) *--d='-';
    int len=end(buf)-d;
    if(os.rdbuf()->sputn(d,len)!=len){
      os.setstate(ios_base::badbit);
    }
  }
  return os;
}

istream &operator>>(istream &is,__int128_t &val){
  string s;
  is>>s;
  val=0;
  for(int i=0;i<(int)s.size();i++)
    if(isdigit(s[i])) val=val*10+s[i]-'0';
  if(s[0]=='-') val*=-1;
  return is;
}

@ int128 input:

template <typename T> inline T read() {
    T x = 0, f = 1;
    int ch = getchar();
    for (; !isdigit(ch); ch = getchar())
        if (ch == '-') f = -1;
    for (; isdigit(ch); ch = getchar()) x = x * 10 + ch - '0';
    return x * f;
}

a = read<int>();
b = read<long long>();
c = read<__int128>();

