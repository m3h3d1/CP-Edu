# use 1ll
	int x = 1000000;
	int y = 1000000;
	long long int z = 1ll*x*y;

long long int z = 1ll << 40;

# (z + x*y)%mod is the same as ((z%mod) + ((x%mod)*(y%mod))%mod)%mod.

# inbuilt gcd function __gcd(x,y)

@ fill 2d array:
	fill(&arr[0][0], &arr[0][0]+sizeof(arr), 1); // not working

	working:
		int mem[N][N]
		fill(mem[0]+0, mem[0]+N*N, 3);
		fill(mem[0]+0, mem[0]+sizeof(mem)/sizeof(int), 3);
@ 2D vector of N rows and M column, with a value 0:
	vector<vector<int>> vec(n ,vector<int>(m, 0));

@ init vector:
	vector<int> v;
	v = vector<int> (n, 1);

@ resize 2d vector:
	// vector<vector<int>> M;
	// int m = number of rows, n = number of columns;
	M.resize(m, vector<int>(n));

	matrix.clear();
	matrix.resize( row_count , vector<int>( column_count , initialization_value ) );
	// we can create a 2D integer vector with 3 rows and 5 columns having "-1" as initial value by:
	matrix.clear();
	matrix.resize(3, vector<int> (5,-1));

@ ceil:
	ceil(a/b) = (a+b-1)/b;
	ceil(a/b) = -(-a/b)
	
@ vector input:
	vector<int> A(n);
	for(int &x: A) {
		cin>>x;
	}

@ calculate the most significant digit of any number:
	int n;
	cin >> n;
	double k=log10(n);
	k=k-floor(k);
	int x=pow(10,k);
	cout << x;

@ Calculating the number of digits directly:
	Number of digits in N =floor(log10(N)) + 1;

@ digits of n factorial:
	double res=0;
	cin>>n>>base;
	for(int i=1;i<=n;++i) {
		res+=log10(i)/log10(base);
	}
	cout<<floor(res)+1<<endl;

@ Efficient trick to know if a number is a power of 2:
	/* Function to check if x is power of 2*/
	bool isPowerOfTwo (int x){
		/*First x in the below expression
		is for the case when x is 0 */
		return x && (!(x&(x-1)));
	}

@ int to string:
	string s = to_string(100);
	stringstream ss;
	ss<<n;
	cout<<ss.str()<<endl;

@ string to int:
	int stoi( const std::string& str, std::size_t* pos = 0, int base = 10 ); // Interprets a signed integer value in the string str.
	int x = stoi(str, 0 ,10);
	int x = stoi(str) // default 10 base

@ Copy Algorithm: used to copy elements from one container to another.
	int source[5] = {0, 12, 34, 50, 80};
	int target[5];
	// copy 5 elements from source to target
	copy_n(source, 5, target);

# for(i=start;i<=end && end-i+1>=r-indx;i++)
	from 03. print all combination

# setw() -> to set the number of digit
  setfill() -> to fill with charectars
  setprecision(3)<<fixed<<
  
# cin.tie(NULL) -> dile sobgula input ekbare niye then output dekhay?

# jodi stl function thake abar oi name nijer arekta function lekha hoy,
	tahole create kora function ta kaj korbe.

@ separate test cases: if(T) cout<<'\n'; (uva 10963)

@ direction array:
	Four:
	int dx[]={-1,0,0,1};
	int dy[]={0,-1,1,0};

	Eight:
	int dx[]={-1,-1,-1,0,0,1,1,1};
	int dy[]={-1,0,1,-1,1,-1,0,1};

	Knight:
	int dx[] = {2,2,-2,-2,1,1,-1,-1};
	int dy[] = {1,-1,1,-1,2,-2,2,-2};

	Knight:
	int hx[]={-2,-2,-1,+1,+2,+2,-1,+1};
	int hy[]={+1,-1,+2,+2,-1,+1,-2,-2};

	King:
	int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};
	int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};

@ Binary std::string to decimal
	unsigned long long val = std::bitset<64>(str).to_ullong(); (bitset)
	long long val=stoll(str,0,2); (include<string>)

@ use of auto:
	for(auto it=mp.begin();it!=mp.end();++it)

@ for range:
	for(auto x: vec) cout<<x<<" ";

@ initialise copy constructor:
	// vector<string> v created earlier
	// copy constructor called
	vector<string> copyV(v);
	vector<string> copyV2 = v;

@ extract words from line:
	getline(cin,str);
	string word;
	stringstream ss(str);
	while(ss>>word) {	
	}

@ reset structure:
	You can just assign a constructed temporary to it:
	Part my_struct;
	my_struct = Part(); // reset
	
	C++11:
	my_struct = {}; // reset


@ Random number generator:
	mt19937 RNG(chrono::steady_clock::now().time_since_epoch().count()); 
	#define SHUF(v) shuffle(v.begin(), v.end(), RNG);
	// Use mt19937_64 for 64 bit random numbers.

@ Ignore warning from specific lines of code:
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wconversion"
	...Code...
	#pragma GCC diagnostic pop

@ Check Overflow a*b:
	int isOverflow(unsigned long long a, unsigned long long b) { 
	    if (a == 0 || b == 0) return 0; 
	    unsigned long long result = a * b; 
	    if (a == result / b) return 0; 
	    else return 1; 
	} 


@ shortcut:
	int check=1;
	puts(check? "ok":"not ok");
	return 0 * puts("End");
	return printf("End"), 0;
	return cout<<"Hello", 0;

###next to solve:
	uva:
		12043




###
FAST IO:
	template <typename T> inline void read(T &x) {
	    bool neg=false;
	    int c=getchar();
	    while(!isdigit(c)) {
	        if(c=='-') neg = true;
	        c=getchar();
	    }
	    for(x=0;isdigit(c);c=getchar())
	        x = (x<<1) + (x<<3) + c-'0';
	    if(neg) x *= -1;
	}
	read(x);

@ update func:
	void update(int v, int l, int r, int i, int j, ll x) {
	    if(l>=i && r<=j) {
	        sum[v]+=x;
	        lazy[v]+=x;
	        MAX[v] = max(MAX[v], sum[v]);
	        prelazy[v] = max(prelazy[v], lazy[v]);
	        return;
	    }
	    push_down(v);
	    int m = (l+r)/2;
	    if(i<=m) update(lchild,i,j,x);
	    if(j>m) update(rchild,i,j,x);
	    push_up(v);
	}

